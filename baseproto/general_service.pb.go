// Code generated by protoc-gen-go. DO NOT EDIT.
// source: general_service.proto

package baseproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerNameRequest struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerNameRequest) Reset()         { *m = ServerNameRequest{} }
func (m *ServerNameRequest) String() string { return proto.CompactTextString(m) }
func (*ServerNameRequest) ProtoMessage()    {}
func (*ServerNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f99cf42164832cbf, []int{0}
}

func (m *ServerNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerNameRequest.Unmarshal(m, b)
}
func (m *ServerNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerNameRequest.Marshal(b, m, deterministic)
}
func (m *ServerNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerNameRequest.Merge(m, src)
}
func (m *ServerNameRequest) XXX_Size() int {
	return xxx_messageInfo_ServerNameRequest.Size(m)
}
func (m *ServerNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServerNameRequest proto.InternalMessageInfo

func (m *ServerNameRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type ServerNameResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerNameResponse) Reset()         { *m = ServerNameResponse{} }
func (m *ServerNameResponse) String() string { return proto.CompactTextString(m) }
func (*ServerNameResponse) ProtoMessage()    {}
func (*ServerNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f99cf42164832cbf, []int{1}
}

func (m *ServerNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerNameResponse.Unmarshal(m, b)
}
func (m *ServerNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerNameResponse.Marshal(b, m, deterministic)
}
func (m *ServerNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerNameResponse.Merge(m, src)
}
func (m *ServerNameResponse) XXX_Size() int {
	return xxx_messageInfo_ServerNameResponse.Size(m)
}
func (m *ServerNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerNameResponse proto.InternalMessageInfo

func (m *ServerNameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerNameRequest)(nil), "baseproto.ServerNameRequest")
	proto.RegisterType((*ServerNameResponse)(nil), "baseproto.ServerNameResponse")
}

func init() { proto.RegisterFile("general_service.proto", fileDescriptor_f99cf42164832cbf) }

var fileDescriptor_f99cf42164832cbf = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0xcc, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4c, 0x4a, 0x2c, 0x4e, 0x05, 0x33, 0x95, 0x4c, 0xb8, 0x04, 0x83, 0x53, 0x8b,
	0xca, 0x52, 0x8b, 0xfc, 0x12, 0x73, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xe4,
	0xb9, 0xb8, 0x93, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0xe2, 0xf3, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0xb8, 0x20, 0x42, 0x20, 0x75, 0x4a, 0x1a, 0x5c, 0x42, 0xc8, 0xba, 0x8a,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x90, 0xd4, 0x83, 0xd9, 0x46, 0x71, 0x5c,
	0x7c, 0xee, 0x10, 0x37, 0x04, 0x43, 0x9c, 0x20, 0xe4, 0xc3, 0xc5, 0xeb, 0x9e, 0x5a, 0x82, 0xd0,
	0x2e, 0x24, 0xa3, 0x07, 0x77, 0x8e, 0x1e, 0x86, 0x5b, 0xa4, 0x64, 0x71, 0xc8, 0x42, 0xec, 0x4c,
	0x62, 0x03, 0xcb, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xb7, 0x3f, 0x2a, 0xea, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeneralServiceClient is the client API for GeneralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeneralServiceClient interface {
	GetServerName(ctx context.Context, in *ServerNameRequest, opts ...grpc.CallOption) (*ServerNameResponse, error)
}

type generalServiceClient struct {
	cc *grpc.ClientConn
}

func NewGeneralServiceClient(cc *grpc.ClientConn) GeneralServiceClient {
	return &generalServiceClient{cc}
}

func (c *generalServiceClient) GetServerName(ctx context.Context, in *ServerNameRequest, opts ...grpc.CallOption) (*ServerNameResponse, error) {
	out := new(ServerNameResponse)
	err := c.cc.Invoke(ctx, "/baseproto.GeneralService/GetServerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralServiceServer is the server API for GeneralService service.
type GeneralServiceServer interface {
	GetServerName(context.Context, *ServerNameRequest) (*ServerNameResponse, error)
}

// UnimplementedGeneralServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeneralServiceServer struct {
}

func (*UnimplementedGeneralServiceServer) GetServerName(ctx context.Context, req *ServerNameRequest) (*ServerNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerName not implemented")
}

func RegisterGeneralServiceServer(s *grpc.Server, srv GeneralServiceServer) {
	s.RegisterService(&_GeneralService_serviceDesc, srv)
}

func _GeneralService_GetServerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralServiceServer).GetServerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseproto.GeneralService/GetServerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralServiceServer).GetServerName(ctx, req.(*ServerNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeneralService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "baseproto.GeneralService",
	HandlerType: (*GeneralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerName",
			Handler:    _GeneralService_GetServerName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general_service.proto",
}
